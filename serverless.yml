service: nodejs-lambda-serverless-boilerplate

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-offline-lambda-invoke
  - serverless-dotenv-plugin
  - serverless-prune-plugin

custom:
  prune:
    automatic: true
    number: 3
  esbuild:
    bundle: true
    minify: true
    platform: 'node'
    sourcesContent: false
    concurrency: 8
    sourcemap: 'external'
  serverless-offline:
    httpPort: 4000
    websocketPort: 4001
    lambdaPort: 4002
    esbuild: ${self:custom.esbuild}
  defaultCors:
    origin: '*'
    headers:
      - Content-Type
      - Authorization
      - x-auth-token

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${env:REGION, 'us-west-2'}
  apiName: checkout-${self:provider.stage}

  environment:
    REGION: ${self:provider.region}
    API_STAGE: ${self:provider.stage}
    LAMBDA_FUNCTION_PREFIX: ${self:service}-${self:provider.stage}

functions:
  healthz:
    handler: src/functions/healthz.handler
    events:
      - http:
          path: /healthz
          method: get
          cors: true
  getStarted:
    handler: src/functions/getStarted.handler
    timeout: 30
    events:
      - http:
          path: /get-started
          method: ANY
          cors: ${self:custom.defaultCors}
      - http:
          path: '/get-started/{proxy+}'
          method: ANY
          cors: ${self:custom.defaultCors}
  webhook:
    handler: src/functions/webhook.handler
    events:
      - http:
          path: /webhook
          method: post
          cors: true
# only include the Prisma binary required on AWS Lambda while packaging
package:
  individually: true
  patterns:
    - 'node_modules/.prisma/client/**'
    - '!node_modules/.prisma/client/libquery_engine-*'
    - 'node_modules/.prisma/client/libquery_engine-rhel-*'
    - '!node_modules/prisma/libquery_engine-*'
    - '!node_modules/@prisma/engines/**'
    - 'prisma/schema.prisma'
    - '!docs/**'
